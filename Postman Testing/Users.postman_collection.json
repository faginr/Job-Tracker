{
	"info": {
		"_postman_id": "9b664eaf-5f93-4d30-aa17-38bd42338f18",
		"name": "Users",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23541433"
	},
	"item": [
		{
			"name": "Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Status Code Correct\", function () {",
							"    pm.response.to.have.status(201)",
							"})",
							"",
							"pm.test(\"User ID Correct\", function () {",
							"    pm.expect(jsonData.id).to.eql(\"1234567890\");",
							"});",
							"",
							"pm.test(\"Username Correct\", function () {",
							"    pm.expect(jsonData.username).to.eql(\"tester\");",
							"});",
							"",
							"pm.test(\"New User Arrays Empty\", function() {",
							"    pm.expect(jsonData.skills).to.eql([])",
							"    pm.expect(jsonData.contacts).to.eql([])",
							"    pm.expect(jsonData.applications).to.eql([])",
							"})",
							"",
							"pm.environment.set(\"user_id\", jsonData.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{app_url_local}}/users",
					"host": [
						"{{app_url_local}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Duplicate User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status Code Correct\", function () {",
							"    pm.response.to.have.status(400)",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{app_url_local}}/users",
					"host": [
						"{{app_url_local}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Existing User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"let res = pm.response.json()",
							"let expectID = pm.environment.get(\"user_id\");",
							"pm.test(\"Returned User Matches\", function () {",
							"    pm.expect(res.id).to.eql(expectID)",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url_local}}/users/{{user_id}}",
					"host": [
						"{{app_url_local}}"
					],
					"path": [
						"users",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Non-Existent User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url_local}}/users/{{fake_user_id}}",
					"host": [
						"{{app_url_local}}"
					],
					"path": [
						"users",
						"{{fake_user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// TODO - make sure contacts & applications are deleted",
							"let url = pm.collectionVariables.get(\"app_url_local\");",
							"let user_id = pm.variables.get(\"user_id\");",
							"// pm.sendRequest(`${url}/users/${user_id}`, function (err, response) {",
							"//     pm.test(\"User No Longer Found\", function () {",
							"//         pm.expect(response.code).to.eql(404)",
							"//     })",
							"// });",
							"",
							"// pm.sendRequest(`${url}/users/${user_id}/applications`, function (err, response) {",
							"//     pm.test(\"No Apps Tied to User\", function () {",
							"//         pm.expect(response.code).to.eql(404)",
							"//     })",
							"// });",
							"",
							"// pm.sendRequest(`${url}/users/${user_id}/contacts`, function (err, response) {",
							"//     pm.test(\"No Contacts Tied to User\", function () {",
							"//         pm.expect(response.code).to.eql(404)",
							"//     })",
							"// });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/users/{{user_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"users",
						"{{user_id}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token_user1}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "fake_user_id",
			"value": "1",
			"type": "string"
		},
		{
			"key": "user_id",
			"value": "1234567890",
			"type": "string"
		}
	]
}